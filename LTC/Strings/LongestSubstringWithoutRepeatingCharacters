class Solution {
public:

    bool IsValidHash( map<char, unsigned int> &hashMap )
    {
        for( map<char, unsigned int>::iterator it = hashMap.begin(); it != hashMap.end(); it++ )
        {
            if( it->second > 1 )
            {
                return false;
            }
        }
        return true;
    }

    int CalculateLengthOfLongestSubString( string &s )
    {
        unsigned int current_start   = 0, current_end = 0;
        int max_window_size = 1;
        
        map<char, unsigned int> hashMap;
        hashMap.clear();
        
        hashMap[ s[0] ] = 1;
        
        for( unsigned int i = 1; i < s.length(); i++ )
        {
            if( hashMap.find( s[i] ) == hashMap.end() )
            {
                hashMap[ s[i] ] = 1;
                current_end++;
            }
            else
            {
                hashMap[ s[i] ] += 1;
                current_end++;
            }
            
            while( !IsValidHash( hashMap ) )
            {
                hashMap[ s[ current_start] ] -= 1;
                current_start++;
            }
            
            if( current_end - current_start + 1 > max_window_size )
            {
                max_window_size = current_end - current_start + 1;
            }
        }
        
        return max_window_size;
    }

    int lengthOfLongestSubstring(string s)
    {
        if( s.length() == 0 )
        {
            return 0;
        }
        
        if( s.length() == 1 )
        {
            return 1;
        }
        
        return CalculateLengthOfLongestSubString( s );
        
    }
};

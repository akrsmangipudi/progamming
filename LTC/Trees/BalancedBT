Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
 
int HeightOfBT( struct TreeNode *root )
{
    if( !root )
        return 0;
        
    int leftHt  = HeightOfBT( root->left );
    int rightHt = HeightOfBT( root->right );
    
    return ( leftHt >= rightHt ) ? 1 + leftHt : 1 + rightHt;
}

bool isBalanced(struct TreeNode* root)
{
    if( !root )
        return true;
        
    int left  = HeightOfBT( root->left  );
    int right = HeightOfBT( root->right );
    
    return ( ( abs( left - right ) <= 1 ) && isBalanced( root->left ) && isBalanced( root->right ) );
}

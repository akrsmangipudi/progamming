Follow up for problem "Populating Next Right Pointers in Each Node".

What if the given tree could be any binary tree? Would your previous solution still work?

Note:

You may only use constant extra space.
For example,
Given the following binary tree,
         1
       /  \
      2    3
     / \    \
    4   5    7
After calling your function, the tree should look like:
         1 -> NULL
       /  \
      2 -> 3 -> NULL
     / \    \
    4-> 5 -> 7 -> NULL


/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
class Solution {
public:
    void connect(TreeLinkNode *root)
    {
        if( !root )
        {
            return;
        }
        
        queue< TreeLinkNode* > myqueue;
        
        myqueue.push( root );
        myqueue.push( NULL );
        
        while( !myqueue.empty() )
        {
            TreeLinkNode* temp = myqueue.front();
            myqueue.pop();
            
            if( !temp )
            {
                if( !myqueue.empty() )
                {
                    myqueue.push( NULL );
                    continue;
                }
                else
                {
                    break;
                }
            }
            
            temp->next = myqueue.front();
            
            if( temp->left )
            {
                myqueue.push( temp->left );
            }
            
            if( temp->right )
            {
                myqueue.push( temp->right );
            }
        }
    }
};

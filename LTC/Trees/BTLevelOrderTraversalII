Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root)
    {
        vector<vector<int>> result;
        
        if( !root )
            return result;
        
        queue<TreeNode*> q;
        
        vector<int> curr;
        
        q.push( root );
        q.push( NULL );
        
        while( !q.empty() )
        {
            TreeNode* temp = q.front();
            q.pop();
            
            if( !temp )
            {
                if( !q.empty() )
                {
                    q.push( NULL );
                }
                
                result.insert( result.begin(), curr );
                curr.clear();
            }
            else
            {
                curr.push_back( temp->val );
                
                if( temp->left )
                    q.push( temp->left );

                if( temp->right )
                    q.push( temp->right );
                
            }
        }
        return result;
    }
};

# include <iostream>
# include <queue>
# include <stdlib.h>
# include <stdio.h>

using namespace std;

struct TreeNode
{
	unsigned int data;
	TreeNode *left;
	TreeNode *right;
};

void InsertIntoTree( TreeNode **root, unsigned int data )
{
	(*root) = ( TreeNode * )malloc( sizeof( TreeNode ) );
	(*root)->data  = data;
	(*root)->left  = NULL;
	(*root)->right = NULL;
}

void Inorder( TreeNode *root )
{
	if( root )
	{
		Inorder( root->left );
		printf("\t %d", root->data );
		Inorder( root->right );
	}
}

vector<int> GetTreeTopView( TreeNode *root )
{
	vector<int> result;
	if( !root )
	{
		return result;
	}

	queue<TreeNode*> q;
	q.push( root );
	q.push( NULL );

	while( !q.empty() )
	{
		root = q.front();
		q.pop();

		// Popped NULL.
		if( !root )
		{
			if( q.empty() )
			{
				break;
			}

			q.push( NULL );
			result.push_back ( q.front()->data );
			continue;
		}

		if( NULL == q.front() )
		{
			result.push_back( root->data );
		}
		
		if( root->left )
		{
			q.push( root->left );
		}

		if( root->right )
		{
			q.push( root->right );
		}
	}
	return result;
}

int main()
{
	TreeNode *root = NULL;

	InsertIntoTree( &root, 1 );
	InsertIntoTree( &root->left, 2 );
	InsertIntoTree( &root->right, 3 );
	InsertIntoTree( &root->left->left, 4 );
	InsertIntoTree( &root->left->right, 5 );
	InsertIntoTree( &root->right->left, 6 );
	InsertIntoTree( &root->right->right, 7 );

	printf("\n Inorder Traversal: ");
	Inorder( root );
	printf("\n");

	vector<int> result = GetTreeTopView( root );

	cout << endl;
	for( int i = 0; i < result.size(); i++ )
	{
		cout << " " << result[i];
	}
	cout << endl;

	return 0;
}

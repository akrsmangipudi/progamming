Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root)
    {
        vector<vector<int>> result;
        
        queue< TreeNode* > myqueue;
        
        if( !root )
            return result;
            
        myqueue.push( root );
        myqueue.push( NULL );
        
        vector<int> level;
        
        while( !myqueue.empty() )
        {
            TreeNode* temp = myqueue.front();
            myqueue.pop();
            
            if( !temp )
            {
                if( !myqueue.empty() )
                {
                    result.push_back( level );
                    level.clear();
                    myqueue.push( NULL );
                    continue;
                }
                else
                {
                    result.push_back( level );
                    break;
                }
            }
            
            level.push_back( temp->val );
            
            if( temp->left )
            {
                myqueue.push( temp->left );
            }
            
            if( temp->right )
            {
                myqueue.push( temp->right );
            }
        }
        
        return result;
    }
};

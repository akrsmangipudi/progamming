Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
  * };
 */

bool isBTBST( struct TreeNode *root, struct TreeNode **prev)
{
    if( !root )
    {
        return true;
    }
    
    if( ! isBTBST( root->left, prev ))
    {
        return false;
    }
    
    if( *prev && root->val <= (*prev)->val )
    {
        return false;
    }
    
    *prev = root;
    return isBTBST( root->right, prev );
}

bool isValidBST(struct TreeNode *root) 
{
    struct TreeNode *prev = NULL;
    return isBTBST( root, &prev );
}

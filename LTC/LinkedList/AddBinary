Given two binary strings, return their sum (also a binary string).

For example,
a = "11"
b = "1"
Return "100".

char* addBinary(char* a, char* b)
{
    char *result = (char *)malloc(strlen(a) + strlen(b) + 1);
    memset( result, 0, strlen(a) + strlen(b) + 1);
    char carry = 0;
    int r = 0, o = strlen(a) - 1, t = strlen(b) - 1;
    printf("\n 1:%c 2:%c \n",a[o] , b[t]);
    while( o >= 0 || t >= 0 )
    {
        if( (o >= 0) && (t >= 0) )
        {
            if( (a[o] - '0') +(b[t] - '0') + carry == 2 )
            {
                result[r] = 0 + '0';
                carry  = 1;
            }
            else if( (a[o] - '0') + (b[t] - '0') + carry == 3 )
            {
                result[r] = 1 + '0';
                carry  = 1;
            }
            else
            {
                result[r] = (a[o] - '0') + (b[t] - '0') + carry + '0';
                printf("\n %c 1:%c %c %d\n", result[r], a[o], b[t], carry );
                carry  = 0;
            }
            o--;
            t--;
            r++;
        }
        else
        {
            while( o >= 0)
            {
                if( (a[o] - '0') + carry == 2 )
                {
                    result[r] = 0 + '0';
                    carry = 1;
                }
                else
                {
                    result[r] = (a[o] - '0') + carry + '0';
                    carry = 0;
                }
                o--;
                r++;
            }
            while( t >= 0 )
            {
                if( (b[t] - '0') + carry == 2 )
                {
                    result[r] = 0 + '0';
                    carry = 1;
                }
                else
                {
                    result[r] = (b[t] - '0') + carry + '0';
                    carry = 0;
                }
                t--;
                r++;
            }
        }
    }
    if( carry )
    {
        result[r++] = carry + '0';
    }
    result[r] = '\0';
    if( strlen(result) > 1)
    {
        int i = 0;
        for( i = 0; i < strlen(result)/2; i++)
        {
            char temp = result[strlen(result) - 1 - i];
            result[strlen(result) - 1 - i] = result[i];
            result[i] = temp;
        }
        result[strlen(result)] = '\0';
    }

    return result;
}



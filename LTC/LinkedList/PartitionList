Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

For example,
Given 1->4->3->2->5->2 and x = 3,
return 1->2->2->4->3->5.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* partition(struct ListNode* head, int x)
{
    if( !head )
        return head;
    
    struct ListNode* lessPtrStart = NULL;
    struct ListNode* morePtrStart = NULL;
    
    struct ListNode* lessPtrEnd = NULL;
    struct ListNode* morePtrEnd = NULL;
    
    while( head )
    {
        if( head->val < x ) //lessPtr
        {
            if( !lessPtrStart )
            {
                lessPtrStart = head;
                lessPtrEnd = head;
            }
            else
            {
                lessPtrEnd->next = head;
                lessPtrEnd = lessPtrEnd->next;
            }
            
        }
        else //morePtr
        {
            if( !morePtrStart )
            {
                morePtrStart = head;
                morePtrEnd = head;
            }
            else
            {
                morePtrEnd->next = head;
                morePtrEnd = morePtrEnd->next;
            }
        }
        head = head->next;
    }
    
    if( lessPtrEnd )
    {
        lessPtrEnd->next = NULL;   
    }
    
    if( morePtrEnd )
    {
        morePtrEnd->next = NULL;   
    }
    
    if( lessPtrStart )
    {
        lessPtrEnd->next = morePtrStart;
        return lessPtrStart;
    }
    else
    {
        return morePtrStart;
    }
}

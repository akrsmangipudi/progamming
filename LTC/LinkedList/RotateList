Given a list, rotate the list to the right by k places, where k is non-negative.

For example:
Given 1->2->3->4->5->NULL and k = 2,
return 4->5->1->2->3->NULL.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
 
 int LLLength( struct ListNode* head )
 {
    int retVal = 0;
    while( head )
    {
        retVal++;
        head = head->next;
    }
    return retVal;
 }
 
struct ListNode* rotateRight(struct ListNode* head, int k)
{
    if( !head )
        return NULL;
    
    struct ListNode *prev = head;
    struct ListNode *curr = head;
    
    int listLength = LLLength( head );
    
    k = k % listLength;
    
    if(  k == 0 ) 
    {
        return head;
    }
    
    int count = listLength - k;
    
    while( (count - 1) > 0 )
    {
        prev = prev->next;
        count--;
    }
    
    curr = prev->next;
    
    prev->next = NULL;
    
    struct ListNode *temp = curr;
    while( temp->next )
    {
        temp = temp->next;
    }
    
    temp->next = head;
    head = curr;
    
    return head;
}

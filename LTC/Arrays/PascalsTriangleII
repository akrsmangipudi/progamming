Given an index k, return the kth row of the Pascal's triangle.

For example, given k = 3,
Return [1,3,3,1].

Note:
Could you optimize your algorithm to use only O(k) extra space?

class Solution {
public:
    vector<int> getRow(int rowIndex)
    {
        int retIdx = rowIndex;
        
        rowIndex = rowIndex + 1;
        
        vector<vector<int>> result;
        
        vector<int> current;
            
        if( rowIndex >= 1 )
        {
            current.push_back(1);
            result.push_back( current );
            current.clear();
        }
        
        if( rowIndex >= 2 )
        {
            current.push_back(1);
            current.push_back(1);
            result.push_back( current );
            current.clear();
        }
        
        vector<int> previous;
        
        while( rowIndex > 2 )
        {
            previous = result.back( );
            
            // Push 1st element.
            current.push_back( previous[0] );
            
            int i = 0;
            while( i < ( previous.size() - 1 ) )
            {
                current.push_back( previous[i] + previous[i + 1] );
                i++;
            }
            
            // Push last element.
            current.push_back( previous[ previous.size() - 1 ] );
            
            result.push_back( current );
            current.clear();
            previous.clear();
            
            rowIndex--;
        }
        
        return result[ retIdx ];
    }
};

Given a collection of intervals, merge all overlapping intervals.

For example,
Given [1,3],[2,6],[8,10],[15,18],
return [1,6],[8,10],[15,18].

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:

    static bool Compare( const Interval &a, const Interval &b)
    {
        return a.start < b.start;
    }
    
    vector<Interval> MergeIntervals( vector<Interval>& intervals )
    {
        vector<Interval> result;
        
        result.push_back( intervals[0] );
        
        int i = 0, j = 1;

        while( j < intervals.size() )
        {
            i = result.size() - 1;
            
            if( result[i].end >= intervals[j].start )
            {
                result[i].end = max( result[i].end, intervals[j].end );
            }
            else
            {
                result.push_back( intervals[j] );
            }
            j++;
        }
        
        return result;
    }


    vector<Interval> merge(vector<Interval>& intervals)
    {

        if( intervals.size() == 0 || intervals.size() == 1 )
            return intervals;

        sort( intervals.begin(), intervals.end(), Compare );
        
        return MergeIntervals( intervals );
    }
};

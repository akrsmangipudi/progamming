Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.

    For example, given array S = {-1 2 1 -4}, and target = 1.

    The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).


class Solution {
public:
int threeSumClosest(vector<int>& nums, int target)
    {
        sort( nums.begin() , nums.end() );

        if( nums.size() < 2 )
            return -1;

        int closestSum = nums[ 0 ] + nums[ nums.size() - 1 ] + nums[ nums.size() - 2];

        for( int i = nums.size() - 1; i >= 2; i-- )
        {
            int high = i - 1;
            int low  = 0;

            while( low < high )
            {
                int tempSum = nums[ i ] + nums[ high ] + nums[ low ];

                if( abs( tempSum - target ) < abs( closestSum - target) )
                {
                    closestSum = tempSum;
                }
                
                if( tempSum == target )
                {
                    closestSum = target;
                    break;
                }

                if( tempSum > target )
                {
                    high--;
                }
                else
                {
                    low++;
                }
            }
            if( target == closestSum )
                break;
        }
        return closestSum;

    }

};

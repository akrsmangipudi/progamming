Follow up for "Find Minimum in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?
Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

Find the minimum element.

The array may contain duplicates.

int FindMinWithDuplicates( int *nums, int low, int high )
{
    if( low <= high )
    {
        int mid = (low + high)/2;
        
        if( ( ( mid == 0 ) || ( nums[mid] < nums[mid-1] ) ) && ( ( mid == high )  || ( nums[mid] <= nums[ mid + 1 ] ) ) )
        {
            return nums[mid];
        }
        
        if( ( nums[mid] == nums[low] ) || ( nums[mid] == nums[high] ) )
        {
            int leftMin  = FindMinWithDuplicates( nums, low, mid - 1 );
            int rightMin = FindMinWithDuplicates( nums, mid + 1, high );
            if( ( leftMin == -1 ) && ( rightMin == -1 ) )
            {
                return nums[mid];
            }
            
            if( -1 == leftMin && -1 != rightMin )
            {
                return rightMin;
            }
            
            if( -1 != leftMin && -1 == rightMin )
            {
                return leftMin;
            }
            
            return ( leftMin <= rightMin ) ? leftMin : rightMin;
        }
        
        if( nums[mid] > nums[low] )
        {
            // Full increasing sequence.
            if( nums[mid] < nums[high] )
            {
                return FindMinWithDuplicates( nums, low, mid - 1 );
            }
            else
            {
                return FindMinWithDuplicates( nums, mid + 1, high );
            }
        }
        
        else
        {
            // Full decreasing sequence.
            if( nums[mid] > nums[high] )
            {
                return FindMinWithDuplicates( nums, mid + 1, high );
            }
            else
            {
                return FindMinWithDuplicates( nums, low, mid - 1 );
            }
        }
    }
    return -1;
}

int findMin(int* nums, int numsSize)
{
    if( numsSize == 1 )
        return nums[0];

    return FindMinWithDuplicates( nums, 0, numsSize - 1 );            
    
}

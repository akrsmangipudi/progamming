Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:
Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)
The solution set must not contain duplicate triplets.
    For example, given array S = {-1 0 1 2 -1 -4},

    A solution set is:
    (-1, 0, 1)
    (-1, -1, 2)


class Solution {
public:
    vector< vector < int > > threeSum(vector<int>& nums)
    {
        vector< vector <int> > result;

        sort( nums.begin(), nums.end() );

        for( int i = nums.size() - 1; i >= 2; i-- )
        {
            int low  = 0;
            int high = i - 1;
            
            while( low < high )
            {
                int currentSum = nums[ i ] + nums[ high ] + nums[ low ];

                if( currentSum == 0 )
                {
                    vector<int> temp;
                    temp.push_back(nums[low]);
                    temp.push_back(nums[high]);
                    temp.push_back(nums[i]);
                    result.push_back( temp );
                    
                    while( ( high > 0 ) && ( nums[high] == nums[high - 1] ) )
                    {
                        high--;
                    }
                    
                    while( ( low < nums.size() - 1 ) && ( nums[low] == nums[low + 1] ) )
                    {
                        low++;
                    }
                    
                    low++;
                    high--;
                }
                else
                {
                    if( currentSum > 0 )
                    {
                        high--;
                    }
                    else
                    {
                        low++;
                    }
                }
            }
            while( ( i >= 2 ) && ( nums[i] == nums[i - 1] ) )
            {
                --i;
            }
        }
        return result;
        }

};

Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle
[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Note:
Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.


class Solution {
public:
    int minimumTotal(vector<vector<int> > &triangle)
    {
        for( int i = 1; i < triangle.size(); i++ )
        {
            for( int j = 0; j < triangle[i].size(); j++ )
            {
                if( j == 0 ) // First element in the current column.
                {
                    triangle[i][j] = triangle[i - 1][j] + triangle[i][j];
                    continue;
                }
                
                if( j == ( triangle[i].size() - 1 ) ) // Last element in the current column
                {
                    triangle[i][j] = triangle[i - 1][j - 1] + triangle[i][j];
                    continue;
                }
                
                triangle[i][j] = min( triangle[i - 1][j - 1], triangle[i - 1][j] ) + triangle[i][j];
            }
        }
        
        sort( triangle[triangle.size() - 1].begin(), triangle[triangle.size() - 1].end() );
        
        return triangle[triangle.size() - 1][0];
        
        //return *min_element( triangle[triangle.size() - 1].begin(), triangle[triangle.size() - 1].end() );
    }
};

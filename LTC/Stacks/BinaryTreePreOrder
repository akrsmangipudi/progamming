Given a binary tree, return the preorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},
   1
    \
     2
    /
   3
return [1,2,3].

Note: Recursive solution is trivial, could you do it iteratively?

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root)
    {
        vector<int> result;
        stack<TreeNode*> myStack;
        while( 1 )
        {
            while( root )
            {
                result.push_back( root->val );
                myStack.push(root);
                root = root->left;
            }
            
            if( myStack.empty() )
            {
                break;
            }
            
            root = myStack.top();
            myStack.pop();
            
            root = root->right;
            
        }
        return result;
    }
};

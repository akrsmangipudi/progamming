Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root)
    {
        vector<vector<int>> result;
        
        if( !root )
        {
            return result;
        }

        int rtol = 1;
        
        vector<int> currentLevel;
        
        stack<TreeNode*> current;
        stack<TreeNode*> next;
        
        current.push( root );
        
        while( !current.empty() )
        {
            TreeNode* node = current.top();
            current.pop();
            
            currentLevel.push_back( node->val );
            
            if( rtol )
            {
                if( node->left )
                {
                    next.push( node->left );
                }
                
                if( node->right )
                {
                    next.push( node->right );
                }
            }
            else
            {
                if( node->right )
                {
                    next.push( node->right );
                }
                
                if( node->left )
                {
                    next.push( node->left );
                }
            }
            
            if( current.empty() )
            {
                result.push_back( currentLevel );
                currentLevel.clear();
                
                swap( current, next );
                rtol = 1 - rtol;
            }
        }
       
        return result;        
    }
};

Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.

class MinStack {
public:
    stack<int> s1;
    stack<int> s2;
    
    void push(int x)
    {
        s1.push( x );
        
        if( s2.empty() )
        {
            s2.push( x );
        }
        else
        {
            if( s2.top() >= x )
            {
                s2.push( x );
            }
        }
    }

    void pop()
    {
        if( !s1.empty() )
        {
            if( s1.top() == s2.top() )
            {
                s1.pop();
                s2.pop();
                return;
            }
            s1.pop();
        }
        
    }

    int top() 
    {
        if( !s1.empty() )
        {
            return s1.top();
        }
        return -1;
        
    }

    int getMin()
    {
        if( !s2.empty() )
        {
            return s2.top();
        }
        return -1;
    }
};
